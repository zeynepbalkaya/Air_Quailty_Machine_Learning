# -*- coding: utf-8 -*-
"""ÖDEV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MNtEa_lpHUdtWNu4YfkoVKsCwK7tWNvD
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.utils import resample
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, cohen_kappa_score, roc_curve, auc
from sklearn.metrics import accuracy_score, precision_score, f1_score, cohen_kappa_score, confusion_matrix, roc_auc_score

df = pd.read_csv('AQI.csv', encoding='latin-1',sep=';')

df

df.head()

df.dtypes

df.isnull().sum()

veri=pd.read_csv('AQI.csv', encoding='latin-1',sep=';')
# 'AQI Category' sütunundaki değerlerin sayısını gösterme
etiket_sayisi = veri['AQI Category'].value_counts()
# Sonucu gösterme
print(etiket_sayisi)

# 0 ve 1 etiketlerine göre verileri ayırma
etiket_0 = veri[veri['AQI Category'] == 0]
etiket_1 = veri[veri['AQI Category'] == 1]

# 0 etiketli verilerden rastgele 7500 veri seçme
etiket_0_deneme = resample(etiket_0, replace=False, n_samples=7500, random_state=42)

# 1 etiketli verilerden rastgele 7500 veri seçme
etiket_1_deneme = resample(etiket_1, replace=False, n_samples=7500, random_state=42)

# Yeni dengelemiş veri setini oluşturma
denge_verisi = pd.concat([etiket_0_deneme, etiket_1_deneme, ])

# Her bir etiketin sayısını kontrol etme
print(denge_verisi['AQI Category'].value_counts())

denge_verisi.to_csv('AQI_Denge.csv', index=False)
print(denge_verisi.head())  # Veri setinin ilk birkaç satırını görüntüleme

# Veri setini yükleme
veri = pd.read_csv('AQI_Denge.csv')

# Object tipindeki sütunları One-Hot Encoding ile dönüştürme
veri = pd.get_dummies(veri, columns=['Country', 'City'])

# Etiketlere göre verileri ayırma
etiket_0 = veri[veri['AQI Category'] == 0].sample(n=7500, random_state=42)
etiket_1 = veri[veri['AQI Category'] == 1].sample(n=7500, random_state=42)

# Eşit sayıda örnek alarak veri setini oluşturma
denge_verisi = pd.concat([etiket_0, etiket_1])

# Özellikler ve etiketler olarak ayırma
X = denge_verisi.drop('AQI Category', axis=1)
y = denge_verisi['AQI Category']

# Eğitim ve test setlerine ayırma (eşit sayıda örnek alarak)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.8, stratify=y, random_state=42)

# KNN sınıflandırıcı modelini oluşturma ve eğitme
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

# Test seti üzerinde tahmin yapma
y_pred = knn.predict(X_test)

# Doğruluk
accuracy = accuracy_score(y_test, y_pred)
print("Doğruluk (Accuracy):", accuracy)

# Hassasiyet (Precision)
precision = precision_score(y_test, y_pred)
print("Hassasiyet (Precision):", precision)

# Özgüllük (Specificity)
specificity = recall_score(y_test, y_pred, pos_label=0)
print("Özgüllük (Specificity):", specificity)

# F-ölçümü (F1 Score)
f1 = f1_score(y_test, y_pred)
print("F-Ölçümü (F1 Score):", f1)

# Kappa skoru
kappa = cohen_kappa_score(y_test, y_pred)
print("Kappa Skoru:", kappa)

# Karmaşıklık matrisini çizme
plt.figure(figsize=(8, 6))  # Figure boyutunu belirleme
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', annot_kws={"size": 16})  # Heatmap ile karmaşıklık matrisini çizme
plt.xlabel('Tahmin Edilen Etiket')
plt.ylabel('Gerçek Etiket')
plt.title('Karmaşıklık Matrisi')
plt.show()

# ROC eğrisi ve AUC
fpr, tpr, thresholds = roc_curve(y_test, y_pred)
roc_auc = auc(fpr, tpr)

# ROC eğrisini çizme
plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC eğrisi (AUC = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Eğrisi')
plt.legend(loc="lower right")
plt.show()

# Karar ağacı sınıflandırıcı modelini oluşturma
decision_tree = DecisionTreeClassifier(random_state=42)

# Eğitim verisi üzerinde modeli eğitme
decision_tree.fit(X_train, y_train)

# Test seti üzerinde tahmin yapma
y_pred_tree = decision_tree.predict(X_test)

# Doğruluk
accuracy = accuracy_score(y_test, y_pred_tree)
print("Doğruluk (Accuracy):", accuracy)

# Hassasiyet (Precision)
precision = precision_score(y_test,  y_pred_tree)
print("Hassasiyet (Precision):", precision)

# Özgüllük (Specificity)
specificity = recall_score(y_test,  y_pred_tree, pos_label=0)
print("Özgüllük (Specificity):", specificity)

# F-ölçümü (F1 Score)
f1 = f1_score(y_test,  y_pred_tree)
print("F-Ölçümü (F1 Score):", f1)

# Kappa skoru
kappa = cohen_kappa_score(y_test,  y_pred_tree)
print("Kappa Skoru:", kappa)

# Karmaşıklık matrisini çizme
plt.figure(figsize=(8, 6))  # Figure boyutunu belirleme
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', annot_kws={"size": 16})  # Heatmap ile karmaşıklık matrisini çizme
plt.xlabel('Tahmin Edilen Etiket')
plt.ylabel('Gerçek Etiket')
plt.title('Karmaşıklık Matrisi')
plt.show()

# ROC eğrisi ve AUC
fpr, tpr, thresholds = roc_curve(y_test,  y_pred_tree)
roc_auc = auc(fpr, tpr)

# ROC eğrisini çizme
plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC eğrisi (AUC = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Eğrisi')
plt.legend(loc="lower right")
plt.show()

# Destek vektör makinesi sınıflandırıcısı için modeli önceden tanımlamış olalım
svm_classifier = SVC(C=1.0, kernel='rbf', gamma='auto', random_state=42)  # Örnek parametreler

# Modeli eğitme
svm_classifier.fit(X_train, y_train)

# Test seti üzerinde tahmin yapma
y_pred_svm = svm_classifier.predict(X_test)

# Performans metriklerini hesaplama
# Karmaşıklık matrisini hesaplama
cm = confusion_matrix(y_test, y_pred_svm)
# Karmaşıklık matrisini çizme
plt.figure(figsize=(8, 6))  # Figure boyutunu belirleme
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', annot_kws={"size": 16})  # Heatmap ile karmaşıklık matrisini çizme
plt.xlabel('Tahmin Edilen Etiket')
plt.ylabel('Gerçek Etiket')
plt.title('Karmaşıklık Matrisi')
plt.show()

accuracy = accuracy_score(y_test, y_pred_svm)
precision = precision_score(y_test, y_pred_svm)
recall = recall_score(y_test, y_pred_svm)
f1 = f1_score(y_test, y_pred_svm)
cohen_kappa = cohen_kappa_score(y_test, y_pred_svm)

# ROC eğrisi için gerekli değerleri hesaplama
fpr, tpr, thresholds = roc_curve(y_test, y_pred_svm)
roc_auc = auc(fpr, tpr)

# Metrikleri ekrana yazdırma
print("Accuracy Score:", accuracy)
print("Precision Score:", precision)
print("Recall Score:", recall)
print("F1 Score:", f1)
print("Kappa Score:", cohen_kappa)
print("ROC AUC Score:", roc_auc)

# ROC eğrisini çizme
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, label='ROC Curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC)')
plt.legend(loc="lower right")
plt.show()

# Veri setini yükleme
veri = pd.read_csv('AQI.csv', encoding='latin-1', sep=';')

# 'CO AQI Value' sütununu çıkararak kopyasını oluşturma
veri_without_CO_AQI = veri.drop('CO AQI Value', axis=1)

# Object tipindeki sütunları One-Hot Encoding ile dönüştürme
veri_without_CO_AQI = pd.get_dummies(veri_without_CO_AQI, columns=['Country', 'City'])

# Etiketlere göre verileri ayırma
etiket_0_without_CO_AQI = veri_without_CO_AQI[veri_without_CO_AQI['AQI Category'] == 0].sample(n=7500, random_state=42)
etiket_1_without_CO_AQI = veri_without_CO_AQI[veri_without_CO_AQI['AQI Category'] == 1].sample(n=7500, random_state=42)

# Eşit sayıda örnek alarak veri setini oluşturma
denge_verisi_without_CO_AQI = pd.concat([etiket_0_without_CO_AQI, etiket_1_without_CO_AQI])

# Özellikler ve etiketler olarak ayırma
X_without_CO_AQI = denge_verisi_without_CO_AQI.drop('AQI Category', axis=1)
y_without_CO_AQI = denge_verisi_without_CO_AQI['AQI Category']

# Eğitim ve test setlerine ayırma (eşit sayıda örnek alarak)
X_train_without_CO_AQI, X_test_without_CO_AQI, y_train_without_CO_AQI, y_test_without_CO_AQI = train_test_split(
    X_without_CO_AQI, y_without_CO_AQI, test_size=0.2, stratify=y_without_CO_AQI, random_state=42)

# KNN sınıflandırıcı modelini oluşturma ve eğitme
knn_without_CO_AQI = KNeighborsClassifier(n_neighbors=3)
knn_without_CO_AQI.fit(X_train_without_CO_AQI, y_train_without_CO_AQI)

# Test seti üzerinde tahmin yapma
y_pred_without_CO_AQI = knn_without_CO_AQI.predict(X_test_without_CO_AQI)

# Performans metriklerini hesaplama
accuracy_without_CO_AQI = accuracy_score(y_test_without_CO_AQI, y_pred_without_CO_AQI)
precision_without_CO_AQI = precision_score(y_test_without_CO_AQI, y_pred_without_CO_AQI)
recall_without_CO_AQI = recall_score(y_test_without_CO_AQI, y_pred_without_CO_AQI)
f1_without_CO_AQI = f1_score(y_test_without_CO_AQI, y_pred_without_CO_AQI)
cohen_kappa_without_CO_AQI = cohen_kappa_score(y_test_without_CO_AQI, y_pred_without_CO_AQI)
# Karmaşıklık matrisini çizme
conf_matrix_without_CO_AQI = confusion_matrix(y_test_without_CO_AQI, y_pred_without_CO_AQI)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix_without_CO_AQI, annot=True, fmt='d', cmap='Blues', annot_kws={"size": 16})
plt.xlabel('Tahmin Edilen Etiket')
plt.ylabel('Gerçek Etiket')
plt.title('Karmaşıklık Matrisi')
plt.show()

# Metrikleri ekrana yazdırma
print("Confusion Matrix without CO AQI Value:\n", conf_matrix_without_CO_AQI)
print("Accuracy Score without CO AQI Value:", accuracy_without_CO_AQI)
print("Precision Score without CO AQI Value:", precision_without_CO_AQI)
print("Recall Score without CO AQI Value:", recall_without_CO_AQI)
print("F1 Score without CO AQI Value:", f1_without_CO_AQI)
print("Cohen's Kappa Score without CO AQI Value:", cohen_kappa_without_CO_AQI)

# KNN modelinin karar skorlarını al
y_scores = knn_without_CO_AQI.predict_proba(X_test_without_CO_AQI)

# ROC eğrisi için false positive oranı, true positive oranı ve eşik değerini hesapla
fpr, tpr, thresholds = roc_curve(y_test_without_CO_AQI, y_scores[:, 1])

# Eğri altındaki alanı (AUC) hesapla
roc_auc = auc(fpr, tpr)

# ROC eğrisini çiz
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', lw=2, label='ROC Curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc="lower right")
plt.show()

# Veri setini yükleme
veri = pd.read_csv('AQI.csv', encoding='latin-1', sep=';')

# 'Ozone AQI Value' sütununu çıkararak kopyasını oluşturma
veri_without_Ozone_AQI = veri.drop('Ozone AQI Value', axis=1)

# Object tipindeki sütunları One-Hot Encoding ile dönüştürme
veri_without_Ozone_AQI = pd.get_dummies(veri_without_Ozone_AQI, columns=['Country', 'City'])# 'Ozone AQI Value' sütununu çıkararak kopyasını oluşturma


# Etiketlere göre verileri ayırma
etiket_0_without_Ozone_AQI = veri_without_Ozone_AQI[veri_without_Ozone_AQI['AQI Category'] == 0].sample(n=7500, random_state=42)
etiket_1_without_Ozone_AQI = veri_without_Ozone_AQI[veri_without_Ozone_AQI['AQI Category'] == 1].sample(n=7500, random_state=42)

# Eşit sayıda örnek alarak veri setini oluşturma
denge_verisi_without_Ozone_AQI = pd.concat([etiket_0_without_Ozone_AQI, etiket_1_without_Ozone_AQI])

# Özellikler ve etiketler olarak ayırma
X_without_Ozone_AQI = denge_verisi_without_Ozone_AQI.drop('AQI Category', axis=1)
y_without_Ozone_AQI = denge_verisi_without_Ozone_AQI['AQI Category']

# Eğitim ve test setlerine ayırma (eşit sayıda örnek alarak)
X_train_without_Ozone_AQI, X_test_without_Ozone_AQI, y_train_without_Ozone_AQI, y_test_without_Ozone_AQI = train_test_split(
    X_without_Ozone_AQI, y_without_Ozone_AQI, test_size=0.2, stratify=y_without_Ozone_AQI, random_state=42)

# KNN sınıflandırıcı modelini oluşturma ve eğitme
knn_without_Ozone_AQI = KNeighborsClassifier(n_neighbors=3)
knn_without_Ozone_AQI.fit(X_train_without_Ozone_AQI, y_train_without_Ozone_AQI)

# Test seti üzerinde tahmin yapma
y_pred_without_Ozone_AQI = knn_without_Ozone_AQI.predict(X_test_without_Ozone_AQI)

# Performans metriklerini hesaplama
accuracy_without_Ozone_AQI = accuracy_score(y_test_without_Ozone_AQI, y_pred_without_Ozone_AQI)
precision_without_Ozone_AQI = precision_score(y_test_without_Ozone_AQI, y_pred_without_Ozone_AQI)
recall_without_Ozone_AQI = recall_score(y_test_without_Ozone_AQI, y_pred_without_Ozone_AQI)
f1_without_Ozone_AQI = f1_score(y_test_without_Ozone_AQI, y_pred_without_Ozone_AQI)
cohen_kappa_without_Ozone_AQI = cohen_kappa_score(y_test_without_Ozone_AQI, y_pred_without_Ozone_AQI)

# Karmaşıklık matrisini çizme
conf_matrix_without_Ozone_AQI = confusion_matrix(y_test_without_Ozone_AQI, y_pred_without_Ozone_AQI)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix_without_Ozone_AQI, annot=True, fmt='d', cmap='Blues', annot_kws={"size": 16})
plt.xlabel('Tahmin Edilen Etiket')
plt.ylabel('Gerçek Etiket')
plt.title('Karmaşıklık Matrisi')
plt.show()
# Metrikleri ekrana yazdırma
print("Accuracy Score without Ozone AQI Value:", accuracy_without_Ozone_AQI)
print("Precision Score without Ozone AQI Value:", precision_without_Ozone_AQI)
print("Recall Score without Ozone AQI Value:", recall_without_Ozone_AQI)
print("F1 Score without Ozone AQI Value:", f1_without_Ozone_AQI)
print("Cohen's Kappa Score without Ozone AQI Value:", cohen_kappa_without_Ozone_AQI)
print("Confusion Matrix without _Ozone_AQI:\n", conf_matrix_without_Ozone_AQI)

# Veri setini yükleme
veri = pd.read_csv('AQI.csv', encoding='latin-1', sep=';')

# 'NO2 AQI Value' sütununu çıkararak kopyasını oluşturma
veri_without_NO2_AQI = veri.drop('NO2 AQI Value', axis=1)

# Object tipindeki sütunları One-Hot Encoding ile dönüştürme
veri_without_NO2_AQI = pd.get_dummies(veri_without_NO2_AQI, columns=['Country', 'City'])

# Etiketlere göre verileri ayırma
etiket_0_without_NO2_AQI = veri_without_NO2_AQI[veri_without_NO2_AQI['AQI Category'] == 0].sample(n=7500, random_state=42)
etiket_1_without_NO2_AQI = veri_without_NO2_AQI[veri_without_NO2_AQI['AQI Category'] == 1].sample(n=7500, random_state=42)

# Eşit sayıda örnek alarak veri setini oluşturma
denge_verisi_without_NO2_AQI = pd.concat([etiket_0_without_NO2_AQI, etiket_1_without_NO2_AQI])

# Özellikler ve etiketler olarak ayırma
X_without_NO2_AQI = denge_verisi_without_NO2_AQI.drop('AQI Category', axis=1)
y_without_NO2_AQI = denge_verisi_without_NO2_AQI['AQI Category']

# Eğitim ve test setlerine ayırma (eşit sayıda örnek alarak)
X_train_without_NO2_AQI, X_test_without_NO2_AQI, y_train_without_NO2_AQI, y_test_without_NO2_AQI = train_test_split(
    X_without_NO2_AQI, y_without_NO2_AQI, test_size=0.2, stratify=y_without_NO2_AQI, random_state=42)

# KNN sınıflandırıcı modelini oluşturma ve eğitme
knn_without_NO2_AQI = KNeighborsClassifier(n_neighbors=3)
knn_without_NO2_AQI.fit(X_train_without_NO2_AQI, y_train_without_NO2_AQI)

# Test seti üzerinde tahmin yapma
y_pred_without_NO2_AQI = knn_without_NO2_AQI.predict(X_test_without_NO2_AQI)

# Performans metriklerini hesaplama
accuracy_without_NO2_AQI = accuracy_score(y_test_without_NO2_AQI, y_pred_without_NO2_AQI)
precision_without_NO2_AQI = precision_score(y_test_without_NO2_AQI, y_pred_without_NO2_AQI)
recall_without_NO2_AQI = recall_score(y_test_without_NO2_AQI, y_pred_without_NO2_AQI)
f1_without_NO2_AQI = f1_score(y_test_without_NO2_AQI, y_pred_without_NO2_AQI)
cohen_kappa_without_NO2_AQI = cohen_kappa_score(y_test_without_NO2_AQI, y_pred_without_NO2_AQI)

# Karmaşıklık matrisini çizme
conf_matrix_without_NO2_AQI = confusion_matrix(y_test_without_NO2_AQI, y_pred_without_NO2_AQI)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix_without_NO2_AQI, annot=True, fmt='d', cmap='Blues', annot_kws={"size": 16})
plt.xlabel('Tahmin Edilen Etiket')
plt.ylabel('Gerçek Etiket')
plt.title('Karmaşıklık Matrisi')
plt.show()

# Metrikleri ekrana yazdırma
print("Accuracy Score without NO2 AQI Value:", accuracy_without_NO2_AQI)
print("Precision Score without NO2 AQI Value:", precision_without_NO2_AQI)
print("Recall Score without NO2 AQI Value:", recall_without_NO2_AQI)
print("F1 Score without NO2 AQI Value:", f1_without_NO2_AQI)
print("Cohen's Kappa Score without NO2 AQI Value:", cohen_kappa_without_NO2_AQI)
print("Confusion Matrix without NO2 AQI Value:\n", conf_matrix_without_NO2_AQI)

# KNN modeli tarafından üretilen olasılık skorlarını al
y_scores = knn_without_NO2_AQI.predict_proba(X_test_without_NO2_AQI)

# ROC eğrisi için false positive oranı, true positive oranı ve eşik değerini hesapla
fpr, tpr, thresholds = roc_curve(y_test_without_NO2_AQI, y_scores[:, 1])

# Eğri altındaki alanı (AUC) hesapla
roc_auc = auc(fpr, tpr)

# ROC eğrisini çiz
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', lw=2, label='ROC Curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc="lower right")
plt.show()

# Veri setini yükleme
veri = pd.read_csv('AQI.csv', encoding='latin-1', sep=';')

# 'PM2.5 AQI Value' sütununu çıkararak kopyasını oluşturma
veri_without_PM25_AQI = veri.drop('PM2.5 AQI Value', axis=1)

# Object tipindeki sütunları One-Hot Encoding ile dönüştürme
veri_without_PM25_AQI = pd.get_dummies(veri_without_PM25_AQI, columns=['Country', 'City'])

# Etiketlere göre verileri ayırma
etiket_0_without_PM25_AQI = veri_without_PM25_AQI[veri_without_PM25_AQI['AQI Category'] == 0].sample(n=7500, random_state=42)
etiket_1_without_PM25_AQI = veri_without_PM25_AQI[veri_without_PM25_AQI['AQI Category'] == 1].sample(n=7500, random_state=42)

# Eşit sayıda örnek alarak veri setini oluşturma
denge_verisi_without_PM25_AQI = pd.concat([etiket_0_without_PM25_AQI, etiket_1_without_PM25_AQI])

# Özellikler ve etiketler olarak ayırma
X_without_PM25_AQI = denge_verisi_without_PM25_AQI.drop('AQI Category', axis=1)
y_without_PM25_AQI = denge_verisi_without_PM25_AQI['AQI Category']

# Eğitim ve test setlerine ayırma (eşit sayıda örnek alarak)
X_train_without_PM25_AQI, X_test_without_PM25_AQI, y_train_without_PM25_AQI, y_test_without_PM25_AQI = train_test_split(
    X_without_PM25_AQI, y_without_PM25_AQI, test_size=0.2, stratify=y_without_PM25_AQI, random_state=42)

# KNN sınıflandırıcı modelini oluşturma ve eğitme
knn_without_PM25_AQI = KNeighborsClassifier(n_neighbors=3)
knn_without_PM25_AQI.fit(X_train_without_PM25_AQI, y_train_without_PM25_AQI)

# Test seti üzerinde tahmin yapma
y_pred_without_PM25_AQI = knn_without_PM25_AQI.predict(X_test_without_PM25_AQI)

# Performans metriklerini hesaplama
accuracy_without_PM25_AQI = accuracy_score(y_test_without_PM25_AQI, y_pred_without_PM25_AQI)
precision_without_PM25_AQI = precision_score(y_test_without_PM25_AQI, y_pred_without_PM25_AQI)
recall_without_PM25_AQI = recall_score(y_test_without_PM25_AQI, y_pred_without_PM25_AQI)
f1_without_PM25_AQI = f1_score(y_test_without_PM25_AQI, y_pred_without_PM25_AQI)
cohen_kappa_without_PM25_AQI = cohen_kappa_score(y_test_without_PM25_AQI, y_pred_without_PM25_AQI)

# Karmaşıklık matrisini çizme
conf_matrix_without_PM25_AQI = confusion_matrix(y_test_without_PM25_AQI, y_pred_without_PM25_AQI)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix_without_PM25_AQI, annot=True, fmt='d', cmap='Blues', annot_kws={"size": 16})
plt.xlabel('Tahmin Edilen Etiket')
plt.ylabel('Gerçek Etiket')
plt.title('Karmaşıklık Matrisi')
plt.show()

# Metrikleri ekrana yazdırma
print("Accuracy Score without PM2.5 AQI Value:", accuracy_without_PM25_AQI)
print("Precision Score without PM2.5 AQI Value:", precision_without_PM25_AQI)
print("Recall Score without PM2.5 AQI Value:", recall_without_PM25_AQI)
print("F1 Score without PM2.5 AQI Value:", f1_without_PM25_AQI)
print("Cohen's Kappa Score without PM2.5 AQI Value:", cohen_kappa_without_PM25_AQI)
print("Confusion Matrix without PM2.5 AQI Value:\n", conf_matrix_without_PM25_AQI)

# KNN modeli tarafından üretilen olasılık skorlarını al
y_scores = knn_without_PM25_AQI.predict_proba(X_test_without_PM25_AQI)

# ROC eğrisi için false positive oranı, true positive oranı ve eşik değerini hesapla
fpr, tpr, thresholds = roc_curve(y_test_without_PM25_AQI, y_scores[:, 1])

# Eğri altındaki alanı (AUC) hesapla
roc_auc = auc(fpr, tpr)

# ROC eğrisini çiz
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', lw=2, label='ROC Curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc="lower right")
plt.show()

# Veri setini yükleme
veri = pd.read_csv('AQI.csv', encoding='latin-1', sep=';')

# Object tipindeki sütunları One-Hot Encoding ile dönüştürme
veri = pd.get_dummies(veri, columns=['Country', 'City'])

# Etiketlere göre verileri ayırma
etiket_0 = veri[veri['AQI Category'] == 0].sample(n=7500, random_state=42)
etiket_1 = veri[veri['AQI Category'] == 1].sample(n=7500, random_state=42)

# Eşit sayıda örnek alarak veri setini oluşturma
denge_verisi = pd.concat([etiket_0, etiket_1])

# Özellikler ve etiketler olarak ayırma
X = denge_verisi.drop('AQI Category', axis=1)
y = denge_verisi['AQI Category']

# Eğitim ve test setlerine ayırma (eşit sayıda örnek alarak)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# Yapay sinir ağı modelini oluşturma ve eğitme
mlp = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=300, random_state=42)  # Örnek olarak katmanlar ve iterasyon sayısı belirtildi.
mlp.fit(X_train, y_train)

# Test seti üzerinde tahmin yapma
y_pred_mlp = mlp.predict(X_test)

# Yapay sinir ağı modeli parametrelerini yazdırma
print("Yapay Sinir Ağı Modeli Parametreleri:")
print(mlp)

# Doğruluk hesaplama
accuracy = accuracy_score(y_test, y_pred_mlp)
print(f"Doğruluk: {accuracy:.4f}")

# Hassasiyet hesaplama
precision = precision_score(y_test, y_pred_mlp)
print(f"Hassasiyet: {precision:.4f}")

# F-ölçümü hesaplama
f1 = f1_score(y_test, y_pred_mlp)
print(f"F-ölçümü: {f1:.4f}")

# Kappa değeri hesaplama
kappa = cohen_kappa_score(y_test, y_pred_mlp)
print(f"Kappa Değeri: {kappa:.4f}")

# Karmaşıklık matrisi
cm = confusion_matrix(y_test, y_pred_mlp)

# Karmaşıklık matrisini ısı haritasıyla çizdirme
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, cmap='Blues', fmt='g')
plt.xlabel('Tahmin Edilen Değerler')
plt.ylabel('Gerçek Değerler')
plt.title('Karmaşıklık Matrisi')
plt.show()


# ROC değeri hesaplama

# Yapay Sinir Ağı tahminleri olasılık değerleri döndürür
y_pred_prob = mlp.predict_proba(X_test)[:, 1]  # Sadece pozitif sınıfın olasılıklarını kullanıyoruz

# ROC eğrisi değerlerini hesaplama
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)

# ROC eğrisini çizme
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, label='ROC Eğrisi (AUC = {:.2f})'.format(roc_auc))
plt.plot([0, 1], [0, 1], 'r--', label='Rastgele')
plt.xlabel('False Positive Rate (FPR)')
plt.ylabel('True Positive Rate (TPR)')
plt.title('ROC Eğrisi')
plt.legend()
plt.show()

# Yapay Sinir Ağı tahminleri olasılık değerleri döndürür
y_pred_prob = mlp.predict_proba(X_test)[:, 1]  # Sadece pozitif sınıfın olasılıklarını kullanıyoruz
roc_auc = roc_auc_score(y_test, y_pred_prob)
print(f"ROC Değeri: {roc_auc:.4f}")